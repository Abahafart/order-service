management:
  endpoints:
    web:
      exposure:
        include: refresh
server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    #how long to wait before closing a TCP connection if not data is transferred
    idle-timeout: 15s
spring:
  application:
    name: order-service
  cloud:
    config:
      uri: http://localhost:8888
      request-read-timeout: 5000
      request-connect-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    function:
      #definition of the function managed by Spring Cloud Function
      definition: dispatchOrder
    stream:
      bindings:
        #The input binding
        dispatchOrder-in-0:
          #The actual name at the broker that the binder binds to (the exchange in rabbitmq)
          destination: order-dispatched
          #The consumer group interested in the destination (the same as the application name)
          group: ${spring.application.name}
        #Output binding created and managed by StreamBridge
        acceptOrder-out-0:
          #The actual name at the broker that the binder binds to (the exchange in RabbitMQ)
          destination: order-accepted
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true
  config:
    import: "optional:configserver:"
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order
    baseline-on-migrate: true
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      #The maximum time to wait to get a connection from the pool
      max-create-connection-time: 2s
      #the initial size of the connection pool
      initial-size: 5
      #the maximum number of connections kept in the pool
      max-size: 10
  lifecycle:
    #Grace period
    timeout-per-shutdown-phase: 15s
  #Configures the integrations with RabbitMQ
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

catalog:
  uri: http://localhost:9001